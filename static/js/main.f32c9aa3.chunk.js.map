{"version":3,"sources":["QRReader.tsx","App.tsx","index.tsx"],"names":["RelativeWrapperDiv","styled","div","props","width","height","VideoArea","video","OverlayDiv","top","left","QRReader","useState","overlay","setOverlay","useRef","timerId","useEffect","a","pause","current","clearInterval","constraints","audio","facingMode","navigator","mediaDevices","getUserMedia","stream","srcObject","play","canvas","OffscreenCanvas","context","getContext","setInterval","drawImage","topLeft","bottomRight","imageData","getImageData","qr","jsqr","data","console","log","showQRFrame","location","topLeftCorner","bottomRightCorner","y","x","Math","abs","gecognizeCallback","timerInterval","ref","defaultProps","App","React","stopOnRecognize","setStopOnRecognize","qrParam","setQRParam","code","setCode","className","e","type","name","value","onChange","target","checked","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f32c9aa3.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport jsqr, { QRCode } from 'jsqr';\nexport type { QRCode } from 'jsqr';\n\nexport type QRReaderProps = {\n  width?: number,\n  height?: number,\n  pause?: boolean,\n  showQRFrame?: boolean,\n  timerInterval?: number,\n  gecognizeCallback?: (e: QRCode) => void,\n}\n\ntype Point = {\n  x: number;\n  y: number;\n}\n\ntype OverlayPosition = {\n  top: number,\n  left: number,\n  width: number,\n  height: number,\n}\n\nconst RelativeWrapperDiv = styled.div<QRReaderProps>`\n  position: relative;\n  width : ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n`;\n\nconst VideoArea = styled.video`\n  position: absolute; \n  z-index : -100;\n`;\n\nconst OverlayDiv = styled.div<OverlayPosition>`\n  position: absolute; \n  border: 1px solid #F00;\n  top   : ${(props) => props.top}px;\n  left  : ${(props) => props.left}px;\n  width : ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n`;\n\n\nconst QRReader: React.FC<QRReaderProps> = (props) => {\n  const [overlay, setOverlay] = useState({ top:0, left: 0, width: 0, height: 0 });  \n  const video = useRef(null as HTMLVideoElement);\n  const timerId = useRef(null);\n\n  const drawRect = (topLeft: Point, bottomRight: Point) => {\n    setOverlay({\n      top: topLeft.y < bottomRight.y ? topLeft.y : bottomRight.y,\n      left: topLeft.x < bottomRight.x ? topLeft.x :bottomRight.x,\n      width: Math.abs(bottomRight.x - topLeft.x),\n      height: Math.abs(bottomRight.y - topLeft.y),\n    });\n  };\n\n  useEffect(() => {\n    (async() => {\n      if (props.pause) {\n        video.current.pause();\n        clearInterval(timerId.current);\n        timerId.current = null;\n        return;\n      }\n\n      const { width, height } = props;\n\n      const constraints = { \n        audio: false, \n        video: {\n          facingMode: 'environment', \n          width, \n          height, \n      }};\n    \n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      video.current.srcObject = stream;\n      video.current.play();\n  \n      const canvas = new OffscreenCanvas(width, height);\n      const context = canvas.getContext('2d');\n\n      if (!timerId.current) {\n        timerId.current = setInterval(() => {\n          context.drawImage(video.current, 0, 0, width, height);\n          const imageData = context.getImageData(0, 0, width, height);\n          const qr = jsqr(imageData.data, imageData.width, imageData.height);\n          if (qr) {\n            console.log(qr.data);\n            if (props.showQRFrame) {\n              drawRect(qr.location.topLeftCorner, qr.location.bottomRightCorner);\n            }\n            if (props.gecognizeCallback) props.gecognizeCallback(qr);               \n          }\n        }, props.timerInterval);\n      }\n      return () => clearInterval(timerId.current);\n    })();\n  }, [props]);\n\n\n\n  return (    \n    <RelativeWrapperDiv {...props}>\n      <VideoArea ref={video}></VideoArea>\n      <OverlayDiv {...overlay}></OverlayDiv>\n    </RelativeWrapperDiv>    \n  );\n}\n\n// propsのデフォルト値を設定\nQRReader.defaultProps = {\n  width: 500,\n  height: 500,\n  pause: false,\n  showQRFrame: true,\n  timerInterval: 300,\n};\n\nexport default QRReader;","import React, { useState } from 'react';\nimport QRReader, { QRCode } from './QRReader';\n\nfunction App() {\n  const [stopOnRecognize, setStopOnRecognize] = React.useState(true);\n  const [qrParam, setQRParam] = useState({\n    width: 500,\n    height: 500,\n    pause: true,\n  });\n\n  const [code, setCode] = useState('');\n\n  const onRecognizeCode = (e: QRCode) => {\n    setCode(e.data);\n    if (stopOnRecognize) {\n      setQRParam( e => { return {...e, pause: true}; });\n    }\n  }\n\n  const toggleVideoStream = () => {\n    setQRParam( e => { return {...e, pause: !e.pause}; });\n  }\n\n  return (\n    <div className=\"App\">\n      <QRReader {...qrParam} gecognizeCallback={onRecognizeCode} />\n      <div>\n        <label>\n          <input type=\"radio\" name=\"rdo\" value=\"0\" onChange={(e) => setStopOnRecognize(e.target.value === \"0\")} checked={stopOnRecognize} />認識時に自動停止\n        </label>\n        <label>\n          <input type=\"radio\" name=\"rdo\" value=\"1\" onChange={(e) => setStopOnRecognize(e.target.value === \"0\")} checked={!stopOnRecognize} />認識時も処理継続\n        </label>\n        \n        <button onClick={toggleVideoStream}>{(qrParam.pause? '再開': '停止')}</button>\n        <p>QRコード：{code}</p>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}